{% extends 'Pckg/Generic/View/frontend.twig' %}

{% block content %}
    <h1>Pckg</h1>
    <h2>About</h2>
    <div>
        <p>Pckg framework is perfect for building everything. Really. You can build simple website, api webservice, shop
            or anything that needs to be accessable from internet.</p>
    </div>
    <h2>Requirements</h2>
    <div>
        <p>
        <ul>
            <li>php7 (with intl, bcmath, gd, zip, curl and ssh2 extensions)</li>
            <li>apache2 (with mod rewrite) / nginx (for web usage :))</li>
            <li>mysql (optional)</li>
            <li>composer, npm and bower (optional)</li>
        </ul>
        </p>
        <p class="note">You can install all requirements via <a href="#">impero</a> in few seconds.</p>
    </div>
    <h2>Installation</h2>
    <div>
        <p>The shortest, quickes and easiest way to start with development in pckg enviroment is installation of <a
                    href="#" class="vendor">pckg/skeleton</a>.</p>
        <p class="code bash">$ composer create-project pckg/skeleton . dev-master --prefer-dist</p>

        <p>You should also install frontend dependencies.</p>
        <p class="code bash">
            $ bower update<br/>
            $ npm update
        </p>

        <p>All empty directories and symlinks are then created with internal command.</p>
        <p class="code bash">$ php console project:init</p>

        <p>You can start with development after app creation.</p>
        <p class="code bash">$ php console app:create</p>

        <p>Optionally, you can initialize git repository, remote and commit initial changes.</p>
        <p class="code bash">
            $ git init .<br/>
            $ git remote add origin git@github.com:foo/bar.git<br/>
            $ gac “Initial commit”
        </p>
        <p class="note"><span class="command">gac</span> is alias for <span class="command">git add . --all && git commit -am</span>
        </p>
    </div>

    <h2>Configuration</h2>
    <div>
        <p>There's really only usual stuff that needs to be done and that's virtualhost configuration. You can manage it
            via <a href="#">impero</a> or manually add it to apache / nginx virtualhost configuration.</p>
        <ul class="related">
            <li><a href="#">config()</a></li>
        </ul>
    </div>

    <h2>Directory structure</h2>
    <div>
        <ul>
            <li>vendor, components, bower_components and node_modules - dependency managers directories</li>
            <li>config - root project configuration</li>
            <li>www - directory that will be exposed to the internet</li>
            <li>storage - directory for framework, cache, uploads, tmp and other files</li>
            <li>app/config - app configuration</li>
            <li>app/src - app source files</li>
        </ul>
        <ul class="related">
            <li><a href="#">path()</a></li>
        </ul>
    </div>

    <h2>Request timeline</h2>
    <div>
        <p>Whole website or application is executed in few simple steps.</p>
        <ul>
            <li>Create context</li>
            <li>Create environment
                <ul>
                    <li>Error reporting</li>
                    <li>Exception handling</li>
                    <li>Path definition</li>
                    <li>Load root config</li>
                </ul>
            </li>
            <li>Create, init and run app
                <ul>
                    <li>Parse app config</li>
                    <li>Set localization</li>
                    <li>Init database connections and routing</li>
                    <li>Register main provider</li>
                    <li>Init session, response, request and assets</li>
                    <li>Run request - <b>this is only thing you need to take care of :)</b></li>
                    <li>Return response</li>
                </ul>
            </li>
        </ul>
    </div>

    <h1>Framework</h1>
    <h2>Environments</h2>
    <ul class="related">
        <li><a href="#">env()</a></li>
        <li><a href="#">isWin()</a></li>
        <li><a href="#">isUnix()</a></li>
    </ul>
    <h3>Production</h3>
    <div>
        <p>Production environment <span class="file">./www/index.php</span> is default unprotected/public entry point
            for
            your app. Framework automatically takes care of disabling error display, optionally register
            <a href="#" class="external">rollbar</a> exception manager and register error output handler.
        </p>
        <ul class="related">
            <li><a href="#">prod()</a></li>
        </ul>
    </div>
    <h3>Development</h3>
    <div>
        <p>Development environment <span class="file">./www/dev.php</span> is only accessable from IPs listed in
            pckg.framework.dev config. All errors are shown by default, <a href="#" class="external">whoops</a>
            exception handler is registered with <span class="class">PrettyPageHandler</span> for quicker and
            easier debugging and <a href="#" class="external">debugbar</a> is shown on frontend and backend. Development
            environment includes basically everything for developer needs.</p>
        <ul class="related">
            <li><a href="#">dev()</a></li>
            <li><a href="#">implicitDev()</a></li>
        </ul>
    </div>
    <h3>Console</h3>
    <div>
        <p>Console handler <span class="file">./console</span> is only accessable from bash. Errors are also shown by
            default and <a href="#" class="external">whoops</a> exception handler is registered with
            <span class="class">PlainTextHandler</span> handler.</p>
        <ul class="related">
            <li><a href="#">console()</a></li>
        </ul>
    </div>

    <h2>Request</h2>
    <div>
        <p>All request objects are extended from <a href="#" class="more">Lazy</a> class.</p>
        <div>
            <ul class="related">
                <li><a href="#">request()</a></li>
            </ul>
        </div>
    </div>
    <h3>Get</h3>
    <div>
        <ul class="related">
            <li><a href="#">get()</a></li>
        </ul>
    </div>
    <h3>Post</h3>
    <div>
        <ul class="related">
            <li><a href="#">post()</a></li>
        </ul>
    </div>
    <h3>Cookie</h3>
    <div>
        <ul class="related">
            <li><a href="#">cookie()</a></li>
        </ul>
    </div>
    <h3>Session</h3>
    <div>
        <ul class="related">
            <li><a href="#">session()</a></li>
        </ul>
    </div>
    <h3>Flash</h3>
    <div>
        <ul class="related">
            <li><a href="#">flash()</a></li>
        </ul>
    </div>
    <h3>Server</h3>
    <div>
        <ul class="related">
            <li><a href="#">server()</a></li>
        </ul>
    </div>

    <h2>Response</h2>
    <div>
        <ul class="related">
            <li><a href="#">response()</a></li>
        </ul>
    </div>
    <h3>HTML</h3>
    <h3>JSON / Ajax</h3>

    <h2>Urls and routing</h2>
    <div>
        <ul class="related">
            <li><a href="#">url()</a></li>
        </ul>
    </div>
    <h3>Routes</h3>
    <div>
        <p>Routes can be easily defined in any provider:</p>
        <p class="code php pre">
            public function routes() {
            return [
            new \Pckg\Framework\Router\Route\Route('/foo', 'foo', \Foo\Controller\Bar::class),
            new \Pckg\Framework\Router\Route\Route('/bar', 'bar', \Foo\Controller\Bar::class),
            ];
            }
        </p>
        <ul class="related">
            <li><a href="#">route()</a></li>
        </ul>
    </div>
    <h3>Groups</h3>
    <div>
        <p>When sharing same parameters, they can be easily grouped:</p>
        <p class="code php pre">
            public function routes() {
            return [
            (new \Pckg\Framework\Router\Route\Group(['controller' => \Foo\Controller\Bar::class]))
            ->routes([
            new \Pckg\Framework\Router\Route\Route('/foo', 'foo'),
            new \Pckg\Framework\Router\Route\Route('/bar', 'bar'),
            ])
            ];
            }
        </p>
        <ul class="related">
            <li><a href="#">routeGroup()</a></li>
        </ul>
    </div>
    <h3>Resolvers</h3>
    <div>
        <p>Common usage is with named route parameters:</p>
        <p class="code php pre">
            public function routes() {
            return [
            (new \Pckg\Framework\Router\Route\Route('/foo/[bar]', 'foo', \Foo\Controller\Bar::class))
            ->resolvers([
            'bar' => \Foo\Resolver\Bar::class,
            ]),
            ];
            }
        </p>
        <p>... and then implementing resolver:</p>
        <p class="code php pre">
            class Bar extends \Pckg\Framework\Router\RouteResolver {

            public function resolve($value) {
            return (new Foos())->where('id', $value)->withPermissionsToRead()->oneOrFail();
            }

            public function parametrize($record) {
            return $record->id;
            }

            }
        </p>
    </div>

    <h2>Controllers</h2>
    <h3>Actions</h3>
    <div>
        <p>Each actions is prefixed with request method and suffixed with 'Action'. For example, when user makes
            <span class="command">GET</span> request on <span class="command">foo</span> action,
            <span class="command">getFooAction()</span> is called.</p>
    </div>
    <h3>Middlewares</h3>
    <div>
        <p>Middlewares are nothing else than simple filters or commands that get executed before controller action gets
            called. You can use them for restricting access, check for autologin cookie, log requests or in any other
            way. All you have to do is implement <span class="command">execute(callable $next)</span> method and return
            <span class="command">$next()</span> if you want to continue with execution.</p>
        <p>With bottom example we restrict remote access and allow only access from localhost.</p>
        <p class="code php pre">
            class RestrictAccess {
            public function execute() {
            if (server('REMOTE_ADDR') != '127.0.0.1') {
            return;
            }

            return $next();
            }
            }
        </p>
        <p>They can be defined on application / provider level:</p>
        <p class="code php pre">
            public function middlewares() {
            return [
            RestrictAccess::class,
            ];
            }
        </p>
        <p>... or route level:</p>
        <p class="code php pre">
            public function routes() {
            return [
            (new Route('/route', 'action', Controller::class))
            ->middlewares([RestrictAccess::class]):
            ];
            }
        </p>
    </div>
    <h3>Afterwares</h3>
    <div>
        <p>The only difference with middlewares is that afterwares gets executed after controller action. Afterwares
            could be used for logging or enriching responses.</p>
        <p class="code php pre">
            class LogEmptyRequest {
            public function execute() {
            $output = response()->getOutput();
            if ($output) {
            Foo::bar();
            }
            return $next();
            }
            }
        </p>
    </div>

    <h2>Templating</h2>
    <div>
        <ul class="related">
            <li><a href="#">view()</a></li>
        </ul>
    </div>
    <h3>Twig</h3>
    <div>
        <p><a href="#" class="external">Twig</a> is default templating engine used in framework.</p>
    </div>
    <h3>PHP</h3>
    <div>
        <p>Raw PHP templating can be enabled manually.</p>
    </div>

    <h2>Providers</h2>
    <div>
        <p>Providers collects different objects, files and other things that are logically connected and needed to
            provide some functionality. Many aspects of framework are designed as providers, for example
            <a href="#" class="more">Environment</a> and <a href="#" class="more">Application</a>.</p>
    </div>
    <h3>Routes</h3>
    <div></div>
    <h3>Autoloaders</h3>
    <h3>Classmaps</h3>
    <h3>Providers</h3>
    <h3>Apps</h3>
    <h3>Consoles</h3>
    <h3>Assets</h3>
    <h3>Paths</h3>
    <h3>Middlewares</h3>
    <h3>Afterwares</h3>
    <h3>View objects</h3>
    <h3>Listeners</h3>
    <h3>Jobs</h3>

    <h2>Events</h2>
    <div>
        <ul class="related">
            <li><a href="#">trigger()</a></li>
        </ul>
    </div>
    <h3>Dispatcher</h3>
    <div>
        <ul class="related">
            <li><a href="#">dispatcher()</a></li>
        </ul>
    </div>
    <h3>Listeners</h3>

    <h2>Commands</h2>
    <h2>Console</h2>
    <h2>Cache</h2>
    <div>
        <ul class="related">
            <li><a href="#">cache()</a></li>
        </ul>
    </div>
    <h2>Config</h2>
    <div>
        <ul class="related">
            <li><a href="#">config()</a></li>
        </ul>
    </div>
    <h2>Localization</h2>
    <div>
        <ul class="related">
            <li><a href="#">runInLocale()</a></li>
        </ul>
    </div>
    <h2>Internationalization</h2>

    <h1>Collection</h1>
    <div>
        <ul class="related">
            <li><a href="#">collect()</a></li>
        </ul>
    </div>

    <h1>Database</h1>
    <div>
        <p><a href="#" class="more">pckg/database</a> is advanced PHP ORM ...</p>
    </div>
    <h2>Configuration</h2>
    <div>
        <p class="code php pre">
            return [
                'default' => [
                    // ...
                ],
            ];
        </p>
    </div>

    <h2>Repository</h2>
    <div>
        <p>Repository presents single database.</p>
    </div>

    <h3>PDO</h3>
    <div>
        <p></p>
    </div>
    <h3>Faker</h3>
    <div>
        <p></p>
    </div>
    <h3>Custom</h3>
    <div>
        <p></p>
    </div>
    <h2>Entity</h2>
    <div>
        <p>Entity presents single entity / table or view in database.</p>
    </div>
    <h2>Record</h2>
    <div>
        <p>Record presents single row / record in table.</p>
    </div>
    <h2>Relation</h2>
    <div>
        <p>Relation presents relations between entities.</p>
    </div>
    <h2>Field</h2>
    <h2>Query</h2>
    <h2>Extensions</h2>

    <h1>Manager</h1>
    <h2>Asset</h2>
    <div>
        <ul class="related">
            <li><a href="#">assetManager()</a></li>
        </ul>
    </div>
    <h2>Locale</h2>
    <div>
        <ul class="related">
            <li><a href="#">localeManager()</a></li>
        </ul>
    </div>
    <h2>Cache</h2>
    <div>
        <ul class="related">
            <li><a href="#">cache()</a></li>
        </ul>
    </div>
    <h2>Gtm</h2>
    <h2>Job</h2>
    <h2>Meta</h2>
    <h2>Page</h2>
    <h2>Seo</h2>
    <div>
        <ul class="related">
            <li><a href="#">seoManager()</a></li>
        </ul>
    </div>
    <h2>Upload</h2>
    <h2>Vue</h2>
    <div>
        <ul class="related">
            <li><a href="#">vueManager()</a></li>
        </ul>
    </div>

    <h1>Migrator</h1>
    <h2>Database</h2>
    <h2>Config</h2>
    <h2>Data</h2>

    <h1>Queue</h1>
    <h2>Job</h2>
    <h2>Queue</h2>
    <div>
        <ul class="related">
            <li><a href="#">queue()</a></li>
        </ul>
    </div>
    <h2>Cron</h2>

    <h1>Translator</h1>

    <h1>Mail</h1>
    <div>
        <ul class="related">
            <li><a href="#">mail()</a></li>
        </ul>
    </div>

    <h1>Deployment</h1>
    <div>
        <p>Check awesome service we've build, <a href="#">condo</a>. It's capable of preparing releases from multiple
            branches, automatically version them, trigger webhooks, comment trello cards about activity and many more.
        </p>
        <p>Otherwise it's really simple to deploy app. Deployment is available via command
            <span class="command">php console project:deploy --remote=remotes</span> which estamblishes SSH connection
            listed in <span class="command">pckg.deploy.remotes</span> config and executes
            <span class="command">php console project:pull</span> and
            <span class="command">php console migrator:install</span>.</p>
    </div>

    <h1>Testing</h1>
    <h2>Codeception</h2>
    <h2>Pipelines</h2>
    <h2>Circle CI</h2>
    <h2>Travis CI</h2>
    <h2>Jenkins</h2>
{% endblock %}